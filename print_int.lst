     1                                  section .data
     2 00000000 303132333435363738-         codes: db '0123456789'
     2 00000009 39                 
     3                                  
     4                                  section .text
     5                                  
     6                                  global main
     7                                  
     8                                  
     9                                  
    10                                  ; one argument of rdi
    11                                  print_int: ; function
    12                                      ; need to keep dividing until rdi is zero
    13                                  
    14                                  ; rsi was only used to test how many times loop iterated
    15                                  
    16                                      ;mov rcx, rdi ; rcx is the number we are using
    17                                  .loop:
    18                                  
    19                                      ; modulo
    20 00000000 4831D2                      xor rdx, rdx
    21 00000003 4889F8                      mov rax, rdi ; dividend (top)
    22 00000006 41B80A000000                mov r8, 10 ; divisor (bottom)
    23 0000000C 49F7F0                      div r8
    24 0000000F 49F7E0                      mul r8 ; rax * r8, result i n edx:rax
    25 00000012 4989F9                      mov r9, rdi
    26 00000015 4929C1                      sub r9, rax ; answer in r9
    27                                  
    28 00000018 57                          push rdi
    29                                  
    30 00000019 B801000000                  mov rax, 1 ; 'write' syscall
    31 0000001E BF01000000                  mov rdi, 1 ; stdout file description
    32                                      ;mov rsi, codes + 0
    33 00000023 498BB1[00000000]            mov rsi, [codes + r9]
    34 0000002A BA01000000                  mov rdx, 1
    35 0000002F 0F05                        syscall
    36                                  
    37 00000031 5F                          pop rdi
    38                                  
    39                                      ; keep dividing by 10
    40 00000032 4831D2                      xor rdx, rdx
    41 00000035 4889F8                      mov rax, rdi ; dividend (top)
    42 00000038 BF0A000000                  mov rdi, 10 ; divisor (bottom)
    43 0000003D 48F7F7                      div rdi 
    44 00000040 4889C7                      mov rdi, rax ; result in rdi
    45                                      ;inc rsi
    46                                  
    47                                  
    48 00000043 4885FF                      test rdi, rdi
    49                                  
    50 00000046 75B8                        jnz .loop
    51                                  
    52                                  
    53                                  
    54 00000048 4831C0                      xor rax, rax ; return rax to it's previous state
    55 0000004B 4831F6                      xor rsi, rsi
    56 0000004E C3                          ret
    57                                  
    58                                  main:
    59 0000004F BFD2040000                  mov rdi, 1234
    60                                      ;mov rsi, 0
    61 00000054 E8A7FFFFFF                  call print_int
    62                                  
    63 00000059 B83C000000                  mov rax, 60
    64 0000005E BE00000000                  mov rsi, 0
    65                                      ;mov rdi,rsi
    66 00000063 0F05                        syscall
